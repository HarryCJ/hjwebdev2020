{"version":3,"sources":["components/ProjectTile.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["ProjectTile","href","className","src","this","props","imgURL","alt","imgAlt","title","Component","Page","inner","App","state","console","log","document","querySelector","anime","targets","keyframes","opacity","duration","delay","easing","begin","complete","Container","Row","Col","sm","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAeeA,E,iLATX,OACE,uBAAGC,KAAK,IAAIC,UAAU,yBACpB,yBAAKC,IAAKC,KAAKC,MAAMC,OAAQJ,UAAU,QAAQK,IAAKH,KAAKC,MAAMG,SAC/D,wBAAIN,UAAU,aAAaE,KAAKC,MAAMI,Y,GANpBC,aCQXC,E,iLAJX,OAAO,yBAAKT,UAAU,QAAQE,KAAKC,MAAMO,W,GAH1BF,aCkGJG,E,YA5Fb,WAAYR,GAAO,IAAD,8BAChB,4CAAMA,KACDS,MAAQ,GAFG,E,iFAOhBC,QAAQC,IAAI,oBAAqBC,SAASC,cAAc,SACtDC,YAAM,CACJC,QAAS,CAACH,SAASC,cAAc,SACjCG,UAAW,CACT,CAACC,QAAS,EAAGC,SAAU,MAEzBC,MAAO,IACPC,OAAQ,gBACRC,MAAO,aAGPC,SAAU,iB,+BAuBd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAK3B,UAAU,gBACf,kBAAC4B,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAK5B,IAAI,iBAAiBD,UAAU,WAAWK,IAAI,SACnD,yBAAKL,UAAU,aACb,uBAAGA,UAAU,SAASD,KAAK,KAA3B,YACA,uBAAGC,UAAU,GAAGD,KAAK,KAArB,SACA,uBAAGC,UAAU,GAAGD,KAAK,KAArB,YACA,uBAAGC,UAAU,GAAGD,KAAK,KAArB,aAGJ,kBAAC6B,EAAA,EAAD,CAAKC,GAAI,IACP,6DACA,oDACA,yBAAK7B,UAAU,cACb,kBAAC,EAAD,CACEU,MACE,oCACE,kBAAC,EAAD,CACEH,MAAM,yCACNH,OAAO,cACPE,OAAO,YAET,kBAAC,EAAD,CACEC,MAAM,uCACNH,OAAO,aACPE,OAAO,sBAET,kBAAC,EAAD,CACEC,MAAM,sBACNH,OAAO,iBACPE,OAAO,gBAET,kBAAC,EAAD,CACEC,MAAM,0BACNH,OAAO,sBACPE,OAAO,+B,GAjFXE,aCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.220c0466.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import { Container, Table, Row, Col, Navbar, Breadcrumb, Dropdown, DropdownButton, Form, Alert, Spinner } from 'react-bootstrap'\r\n\r\nclass ProjectTile extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <a href=\"#\" className=\"col-sm-3 project-tile\">\r\n        <img src={this.props.imgURL} className=\"w-100\" alt={this.props.imgAlt} />\r\n        <h3 className=\"mt-2 mb-0\">{this.props.title}</h3>\r\n      </a>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectTile;\r\n","import React, { Component } from 'react';\r\nimport ProjectTile from './ProjectTile.js'\r\n// import { Container, Table, Row, Col, Navbar, Breadcrumb, Dropdown, DropdownButton, Form, Alert, Spinner } from 'react-bootstrap'\r\n\r\nclass Page extends Component {\r\n\r\n  render(){\r\n    return <div className=\"page\">{this.props.inner}</div>;\r\n  }\r\n}\r\n\r\nexport default Page;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Container, Table, Row, Col, Navbar, Breadcrumb, Dropdown, DropdownButton, Form, Alert, Spinner } from 'react-bootstrap'\nimport anime from 'animejs';\nimport Page from './components/Page.js'\nimport ProjectTile from './components/ProjectTile.js'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n    }\n  }\n\n  componentDidMount(){\n    console.log(\"componentDidMount\", document.querySelector('body'))\n      anime({\n        targets: [document.querySelector('body')],\n        keyframes: [\n          {opacity: 1, duration: 1000},\n        ],\n        delay: 250,\n        easing: 'easeInOutQuad',\n        begin: () => {\n          // footerCar.classList.add(\"active\");\n        },\n        complete: () => {\n          // setTimeout(() => { footerCar.classList.remove(\"active\"); }, 250);\n        },\n      });\n      // anime({\n      //   targets: e.target,\n      //   keyframes: [\n      //     {translateX: -5000, duration: 7500},\n      //     {translateX: 5000, duration: 0},\n      //     {translateX: 0, duration: 5000},\n      //   ],\n      //   delay: 500,\n      //   easing: 'easeInOutQuad',\n      //   begin: () => {\n      //     footerCar.classList.add(\"active\");\n      //   },\n      //   complete: () => {\n      //     setTimeout(() => { footerCar.classList.remove(\"active\"); }, 250);\n      //   },\n      // });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <div className=\"top-padding\"></div>\n          <Col sm={2}>\n            <img src=\"/logofinal.png\" className=\"App-logo\" alt=\"logo\" />\n            <div className=\"nav-links\">\n              <a className=\"active\" href=\"#\">Projects</a>\n              <a className=\"\" href=\"#\">About</a>\n              <a className=\"\" href=\"#\">Services</a>\n              <a className=\"\" href=\"#\">Contact</a>\n            </div>\n          </Col>\n          <Col sm={10}>\n            <h1>Harry Johnson Web Development</h1>\n            <h2>Full-stack developer</h2>\n            <div className=\"mt-3 mx-n3\">\n              <Page\n                inner={\n                  <>\n                    <ProjectTile\n                      title=\"Saint Andrews Bureau Routine Check App\"\n                      imgURL=\"/sabapp.png\"\n                      imgAlt=\"SAB App\"\n                    />\n                    <ProjectTile\n                      title=\"Advanced Boosters Virtual Item Store\"\n                      imgURL=\"/abapp.png\"\n                      imgAlt=\"Advanced Boosters\"\n                    />\n                    <ProjectTile\n                      title=\"Sam and Max Website\"\n                      imgURL=\"/samandmax.png\"\n                      imgAlt=\"Sam and Max\"\n                    />\n                    <ProjectTile\n                      title=\"Soham Playgroup Website\"\n                      imgURL=\"/sohamplaygroup.png\"\n                      imgAlt=\"Soham Playgroup\"\n                    />\n                  </>\n                }\n              />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}